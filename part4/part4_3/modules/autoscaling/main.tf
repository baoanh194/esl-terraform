# The module "iam_instance_profile" "iip" block invokes a 
# Terraform module from the Terraform Registry
# that creates an IAM instance profile with the specified actions. 
# This profile is used to grant permissions to the EC2 instances later.
module "iam_instance_profile" {
  source  = "terraform-in-action/iip/aws"
  actions = ["logs:*", "rds:*"]
}

# The data "aws_ami" "ami" block defines a data source 
# that queries the AWS API for the latest Amazon Linux 2 AMI ID. 
# This ID is used to launch EC2 instances later.|
# Use this command to query the latest Amazon Linux AMI IDs:
# aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn*" --query 'sort_by(Images, &CreationDate)[].Name'
data "aws_ami" "ami" {
  most_recent = true

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-2.0.*-x86_64-gp2"]
  }

  owners = ["amazon"]
}

# prepare a cloud-init configuration to be used by EC2 instances. It gzips and base64 encodes a cloud-config file.
data "cloudinit_config" "config" {
  gzip          = true
  base64_encode = true
  # specifies the content type and the actual content of the configuration.
  part {
    content_type = "text/cloud-config"
    # the templatefile function to include the content from a file named cloud_config.yaml 
    # located in the same directory as the Terraform module ("${path.module}/cloud_config.yaml"). 
    # The content is dynamically generated by applying variables (var.db_config) 
    # to the specified template file (cloud_config.yaml).
    content      = templatefile("${path.module}/cloud_config.yaml", var.db_config) #B
  }
}

#  use to launch EC2 instances
resource "aws_launch_template" "web" {
  name_prefix   = "web-"
  image_id      = data.aws_ami.ami.id
  instance_type = "t2.micro"
  key_name      = var.ssh_keypair
  vpc_security_group_ids = [var.sg.web]
  # Obtained from the rendered content of the cloud-init
  # configuration generated by the data.cloudinit_config.config block. 
  user_data     = data.cloudinit_config.config.rendered

  iam_instance_profile {
    name = module.iam_instance_profile.name
  }
}

# This module sets up an AWS Application Load Balancer (ALB). 
# It configures the ALB with a specific name, type, VPC, subnets, 
# security group, and HTTP listener on port 80. 
# It also defines a target group named "web" to route traffic to 
# instances based on HTTP on port 80.
module "alb" {
  source             = "terraform-aws-modules/alb/aws"
  version            = "~> 6.0"
  name               = var.project_name
  load_balancer_type = "application"
  vpc_id             = var.vpc.vpc_id
  subnets            = var.vpc.public_subnets
  security_groups    = [var.sg.lb]
  http_tcp_listeners = [
    {
      port               = 80,
      protocol           = "HTTP"
      target_group_index = 0
    }
  ]
  target_groups = [
    {
      name_prefix      = "web",
      backend_protocol = "HTTP",
      backend_port     = 80
      target_type      = "instance"
    }
  ]
}

# This block creates an AWS Auto Scaling Group (ASG) 
# named based on the project name. It sets the minimum 
# and maximum number of instances, specifies the private subnets, 
# and associates the ASG with the ALB's target group. 
# It uses the launch template defined earlier for configuring the instances.
resource "aws_autoscaling_group" "web" {
  name                = "${var.project_name}-asg"
  min_size            = 1
  max_size            = 3
  vpc_zone_identifier = var.vpc.private_subnets
  target_group_arns   = module.alb.target_group_arns

  launch_template {
    id      = aws_launch_template.web.id
    version = aws_launch_template.web.latest_version
  }
}
